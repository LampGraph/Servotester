
Servotester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000021c  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000009f3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000a22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000200  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000011f  00000000  00000000  00000c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000165  00000000  00000000  00000d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00000f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000015e  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024a  00000000  00000000  0000115a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000013a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	38 c0       	rjmp	.+112    	; 0x74 <__vector_1>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	6d d0       	rcall	.+218    	; 0x10e <main>
  34:	f1 c0       	rjmp	.+482    	; 0x218 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <_Z8adc_initv>:
#define OCR_MAX 250
#define ICR_MAX F_CPU/64/55.7 //ICR1(TOP) = fclk/(N*f) ; N-Делитель; f-Частота; 

//Инициализация АЦП:
void adc_init(void){
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // делитель частоты = 128
  38:	86 b1       	in	r24, 0x06	; 6
  3a:	87 68       	ori	r24, 0x87	; 135
  3c:	86 b9       	out	0x06, r24	; 6
  3e:	08 95       	ret

00000040 <_Z8adc_readv>:

}

//Чтение канала АЦП:
uint16_t adc_read(){
	ADCSRA &= ~_BV(ADIF);           // сбрасываем бит окончания конверсии
  40:	34 98       	cbi	0x06, 4	; 6
	ADCSRA |= _BV(ADSC);            // начинаем конверсию
  42:	36 9a       	sbi	0x06, 6	; 6
	
	while(ADCSRA & _BV(ADSC));      // ожидаем окончания конверсии. Правильнее этот момент повешать на прерывания.
  44:	36 99       	sbic	0x06, 6	; 6
  46:	fe cf       	rjmp	.-4      	; 0x44 <_Z8adc_readv+0x4>
	
	return ADC;             // возвращаем ADC (10 бит);
  48:	24 b1       	in	r18, 0x04	; 4
  4a:	35 b1       	in	r19, 0x05	; 5
}
  4c:	82 2f       	mov	r24, r18
  4e:	93 2f       	mov	r25, r19
  50:	08 95       	ret

00000052 <_Z9Port_initv>:

//Инициализация портов
void Port_init (void)
{
	//Пока не используем
	DDRB |= (1<<PB1);
  52:	b9 9a       	sbi	0x17, 1	; 23
  54:	08 95       	ret

00000056 <_Z10timer_initv>:
}

//Инициализируем таймеры
void timer_init (void)
{
	TCCR1A |= (1<<COM1A1)|(0<<COM1A0)|(0<<WGM10)|(1<<WGM11); // устанавливаем режим шим Fast PWM
  56:	8f b5       	in	r24, 0x2f	; 47
  58:	82 68       	ori	r24, 0x82	; 130
  5a:	8f bd       	out	0x2f, r24	; 47
	ICR1=ICR_MAX;
  5c:	84 ec       	ldi	r24, 0xC4	; 196
  5e:	98 e0       	ldi	r25, 0x08	; 8
  60:	97 bd       	out	0x27, r25	; 39
  62:	86 bd       	out	0x26, r24	; 38
	OCR1A = OCR_MIN; // выставляем сравнение на минимум
  64:	80 e7       	ldi	r24, 0x70	; 112
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	9b bd       	out	0x2b, r25	; 43
  6a:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |=(1<<CS10)|(1<<CS11)|(0<<CS12)|(1<<WGM12)|(1<<WGM13); //запуск таймера
  6c:	8e b5       	in	r24, 0x2e	; 46
  6e:	8b 61       	ori	r24, 0x1B	; 27
  70:	8e bd       	out	0x2e, r24	; 46
  72:	08 95       	ret

00000074 <__vector_1>:
//	GICR |= (1<<INT0); //разрешение прерывания на INT0
}

//Обработчик прерываний
ISR (INT0_vect) //переход на следующий режим при ажатии кнопки
{
  74:	1f 92       	push	r1
  76:	0f 92       	push	r0
  78:	0f b6       	in	r0, 0x3f	; 63
  7a:	0f 92       	push	r0
  7c:	11 24       	eor	r1, r1

}
  7e:	0f 90       	pop	r0
  80:	0f be       	out	0x3f, r0	; 63
  82:	0f 90       	pop	r0
  84:	1f 90       	pop	r1
  86:	18 95       	reti

00000088 <_Z3maplllll>:

//Ардуиновская функция map
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
  88:	4f 92       	push	r4
  8a:	5f 92       	push	r5
  8c:	6f 92       	push	r6
  8e:	7f 92       	push	r7
  90:	af 92       	push	r10
  92:	bf 92       	push	r11
  94:	cf 92       	push	r12
  96:	df 92       	push	r13
  98:	ef 92       	push	r14
  9a:	ff 92       	push	r15
  9c:	0f 93       	push	r16
  9e:	1f 93       	push	r17
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	29 01       	movw	r4, r18
  aa:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  ac:	9b 01       	movw	r18, r22
  ae:	ac 01       	movw	r20, r24
  b0:	24 19       	sub	r18, r4
  b2:	35 09       	sbc	r19, r5
  b4:	46 09       	sbc	r20, r6
  b6:	57 09       	sbc	r21, r7
  b8:	89 89       	ldd	r24, Y+17	; 0x11
  ba:	9a 89       	ldd	r25, Y+18	; 0x12
  bc:	ab 89       	ldd	r26, Y+19	; 0x13
  be:	bc 89       	ldd	r27, Y+20	; 0x14
  c0:	bc 01       	movw	r22, r24
  c2:	cd 01       	movw	r24, r26
  c4:	6a 19       	sub	r22, r10
  c6:	7b 09       	sbc	r23, r11
  c8:	8c 09       	sbc	r24, r12
  ca:	9d 09       	sbc	r25, r13
  cc:	43 d0       	rcall	.+134    	; 0x154 <__mulsi3>
  ce:	a8 01       	movw	r20, r16
  d0:	97 01       	movw	r18, r14
  d2:	24 19       	sub	r18, r4
  d4:	35 09       	sbc	r19, r5
  d6:	46 09       	sbc	r20, r6
  d8:	57 09       	sbc	r21, r7
  da:	4b d0       	rcall	.+150    	; 0x172 <__divmodsi4>
  dc:	89 01       	movw	r16, r18
  de:	9a 01       	movw	r18, r20
  e0:	0a 0d       	add	r16, r10
  e2:	1b 1d       	adc	r17, r11
  e4:	2c 1d       	adc	r18, r12
  e6:	3d 1d       	adc	r19, r13
}
  e8:	60 2f       	mov	r22, r16
  ea:	71 2f       	mov	r23, r17
  ec:	82 2f       	mov	r24, r18
  ee:	93 2f       	mov	r25, r19
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	ff 90       	pop	r15
  fa:	ef 90       	pop	r14
  fc:	df 90       	pop	r13
  fe:	cf 90       	pop	r12
 100:	bf 90       	pop	r11
 102:	af 90       	pop	r10
 104:	7f 90       	pop	r7
 106:	6f 90       	pop	r6
 108:	5f 90       	pop	r5
 10a:	4f 90       	pop	r4
 10c:	08 95       	ret

0000010e <main>:

int main (void)
{
	uint16_t adc_result;

	Port_init(); //инициализация портов
 10e:	a1 df       	rcall	.-190    	; 0x52 <_Z9Port_initv>
//	init_interp(); //инициализация внешних прерываний
	adc_init(); //Инициализация ADC
 110:	93 df       	rcall	.-218    	; 0x38 <_Z8adc_initv>
	timer_init(); //инициализация таймера
 112:	a1 df       	rcall	.-190    	; 0x56 <_Z10timer_initv>
//	sei(); //глобальное разрешение прерываний	

	while(1){
		adc_result=adc_read(); //Получаем положение потенциометра
		OCR1A = map(adc_result,0,1024,OCR_MIN,OCR_MAX); //Конвертируем положение потенциометра в значение OCR		
 114:	ca ef       	ldi	r28, 0xFA	; 250
	adc_init(); //Инициализация ADC
	timer_init(); //инициализация таймера
//	sei(); //глобальное разрешение прерываний	

	while(1){
		adc_result=adc_read(); //Получаем положение потенциометра
 116:	94 df       	rcall	.-216    	; 0x40 <_Z8adc_readv>
		OCR1A = map(adc_result,0,1024,OCR_MIN,OCR_MAX); //Конвертируем положение потенциометра в значение OCR		
 118:	bc 01       	movw	r22, r24
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	1f 92       	push	r1
 120:	1f 92       	push	r1
 122:	1f 92       	push	r1
 124:	cf 93       	push	r28
 126:	0f 2e       	mov	r0, r31
 128:	f0 e7       	ldi	r31, 0x70	; 112
 12a:	af 2e       	mov	r10, r31
 12c:	b1 2c       	mov	r11, r1
 12e:	c1 2c       	mov	r12, r1
 130:	d1 2c       	mov	r13, r1
 132:	f0 2d       	mov	r31, r0
 134:	e1 2c       	mov	r14, r1
 136:	14 e0       	ldi	r17, 0x04	; 4
 138:	f1 2e       	mov	r15, r17
 13a:	00 e0       	ldi	r16, 0x00	; 0
 13c:	10 e0       	ldi	r17, 0x00	; 0
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	a9 01       	movw	r20, r18
 144:	a1 df       	rcall	.-190    	; 0x88 <_Z3maplllll>
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	7b bd       	out	0x2b, r23	; 43
 150:	6a bd       	out	0x2a, r22	; 42
 152:	e1 cf       	rjmp	.-62     	; 0x116 <main+0x8>

00000154 <__mulsi3>:
 154:	db 01       	movw	r26, r22
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	26 d0       	rcall	.+76     	; 0x1a8 <__muluhisi3>
 15c:	bf 91       	pop	r27
 15e:	af 91       	pop	r26
 160:	a2 9f       	mul	r26, r18
 162:	80 0d       	add	r24, r0
 164:	91 1d       	adc	r25, r1
 166:	a3 9f       	mul	r26, r19
 168:	90 0d       	add	r25, r0
 16a:	b2 9f       	mul	r27, r18
 16c:	90 0d       	add	r25, r0
 16e:	11 24       	eor	r1, r1
 170:	08 95       	ret

00000172 <__divmodsi4>:
 172:	05 2e       	mov	r0, r21
 174:	97 fb       	bst	r25, 7
 176:	16 f4       	brtc	.+4      	; 0x17c <__divmodsi4+0xa>
 178:	00 94       	com	r0
 17a:	06 d0       	rcall	.+12     	; 0x188 <__divmodsi4_neg1>
 17c:	57 fd       	sbrc	r21, 7
 17e:	0c d0       	rcall	.+24     	; 0x198 <__divmodsi4_neg2>
 180:	1d d0       	rcall	.+58     	; 0x1bc <__udivmodsi4>
 182:	07 fc       	sbrc	r0, 7
 184:	09 d0       	rcall	.+18     	; 0x198 <__divmodsi4_neg2>
 186:	7e f4       	brtc	.+30     	; 0x1a6 <__divmodsi4_exit>

00000188 <__divmodsi4_neg1>:
 188:	90 95       	com	r25
 18a:	80 95       	com	r24
 18c:	70 95       	com	r23
 18e:	61 95       	neg	r22
 190:	7f 4f       	sbci	r23, 0xFF	; 255
 192:	8f 4f       	sbci	r24, 0xFF	; 255
 194:	9f 4f       	sbci	r25, 0xFF	; 255
 196:	08 95       	ret

00000198 <__divmodsi4_neg2>:
 198:	50 95       	com	r21
 19a:	40 95       	com	r20
 19c:	30 95       	com	r19
 19e:	21 95       	neg	r18
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
 1a2:	4f 4f       	sbci	r20, 0xFF	; 255
 1a4:	5f 4f       	sbci	r21, 0xFF	; 255

000001a6 <__divmodsi4_exit>:
 1a6:	08 95       	ret

000001a8 <__muluhisi3>:
 1a8:	2b d0       	rcall	.+86     	; 0x200 <__umulhisi3>
 1aa:	a5 9f       	mul	r26, r21
 1ac:	90 0d       	add	r25, r0
 1ae:	b4 9f       	mul	r27, r20
 1b0:	90 0d       	add	r25, r0
 1b2:	a4 9f       	mul	r26, r20
 1b4:	80 0d       	add	r24, r0
 1b6:	91 1d       	adc	r25, r1
 1b8:	11 24       	eor	r1, r1
 1ba:	08 95       	ret

000001bc <__udivmodsi4>:
 1bc:	a1 e2       	ldi	r26, 0x21	; 33
 1be:	1a 2e       	mov	r1, r26
 1c0:	aa 1b       	sub	r26, r26
 1c2:	bb 1b       	sub	r27, r27
 1c4:	fd 01       	movw	r30, r26
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <__udivmodsi4_ep>

000001c8 <__udivmodsi4_loop>:
 1c8:	aa 1f       	adc	r26, r26
 1ca:	bb 1f       	adc	r27, r27
 1cc:	ee 1f       	adc	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	a2 17       	cp	r26, r18
 1d2:	b3 07       	cpc	r27, r19
 1d4:	e4 07       	cpc	r30, r20
 1d6:	f5 07       	cpc	r31, r21
 1d8:	20 f0       	brcs	.+8      	; 0x1e2 <__udivmodsi4_ep>
 1da:	a2 1b       	sub	r26, r18
 1dc:	b3 0b       	sbc	r27, r19
 1de:	e4 0b       	sbc	r30, r20
 1e0:	f5 0b       	sbc	r31, r21

000001e2 <__udivmodsi4_ep>:
 1e2:	66 1f       	adc	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	88 1f       	adc	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	1a 94       	dec	r1
 1ec:	69 f7       	brne	.-38     	; 0x1c8 <__udivmodsi4_loop>
 1ee:	60 95       	com	r22
 1f0:	70 95       	com	r23
 1f2:	80 95       	com	r24
 1f4:	90 95       	com	r25
 1f6:	9b 01       	movw	r18, r22
 1f8:	ac 01       	movw	r20, r24
 1fa:	bd 01       	movw	r22, r26
 1fc:	cf 01       	movw	r24, r30
 1fe:	08 95       	ret

00000200 <__umulhisi3>:
 200:	a2 9f       	mul	r26, r18
 202:	b0 01       	movw	r22, r0
 204:	b3 9f       	mul	r27, r19
 206:	c0 01       	movw	r24, r0
 208:	a3 9f       	mul	r26, r19
 20a:	01 d0       	rcall	.+2      	; 0x20e <__umulhisi3+0xe>
 20c:	b2 9f       	mul	r27, r18
 20e:	70 0d       	add	r23, r0
 210:	81 1d       	adc	r24, r1
 212:	11 24       	eor	r1, r1
 214:	91 1d       	adc	r25, r1
 216:	08 95       	ret

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
