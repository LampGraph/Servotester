
Servotester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002ce  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000aa7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000258  00000000  00000000  00000b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000150  00000000  00000000  00000d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000016f  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00001048  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016f  00000000  00000000  00001144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000025b  00000000  00000000  000012b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000150e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  8e:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z8adc_initv>:
#define OCR_MIN 112
#define OCR_MAX 250

//Инициализация АЦП:
void adc_init(void){
	ADCSRA = _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0); // prescaler = 128
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24

	ADMUX = _BV(MUX0);   // set channel (VREF = VCC)
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	80 93 7c 00 	sts	0x007C, r24
  a2:	08 95       	ret

000000a4 <_Z8adc_readh>:
}

//Чтение канала АЦП:
uint32_t adc_read(uint8_t ch){
	ADCSRA &= ~_BV(ADIF);           // clear hardware "conversion complete" flag
  a4:	ea e7       	ldi	r30, 0x7A	; 122
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8f 7e       	andi	r24, 0xEF	; 239
  ac:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADSC);            // start conversion
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	
	while(ADCSRA & _BV(ADSC));      // wait until conversion complete
  b4:	80 81       	ld	r24, Z
  b6:	86 fd       	sbrc	r24, 6
  b8:	fd cf       	rjmp	.-6      	; 0xb4 <_Z8adc_readh+0x10>
	
	return ADC;             // read ADC (full 10 bits);
  ba:	80 91 78 00 	lds	r24, 0x0078
  be:	90 91 79 00 	lds	r25, 0x0079
}
  c2:	68 2f       	mov	r22, r24
  c4:	79 2f       	mov	r23, r25
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	08 95       	ret

000000cc <_Z9Port_initv>:

void Port_init (void)
{
	DDRB =0xFF; //2-е первые ножки на выход так как они управляют двигателем
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00; // 4ую ножку тоже на выход(ножка OC0)
  d0:	15 b8       	out	0x05, r1	; 5
  d2:	08 95       	ret

000000d4 <_Z10timer_initv>:
}

void timer_init (void)
{
	TCCR1A|=(0<<WGM10)|(1<<WGM11); // устанавливаем режим шим Fast PWM
  d4:	e0 e8       	ldi	r30, 0x80	; 128
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
	TCCR1A|=(1<<COM1A1); // определяем механизм изм состояния ножки
  de:	80 81       	ld	r24, Z
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	80 83       	st	Z, r24
	ICR1=2202; 
  e4:	8a e9       	ldi	r24, 0x9A	; 154
  e6:	98 e0       	ldi	r25, 0x08	; 8
  e8:	90 93 87 00 	sts	0x0087, r25
  ec:	80 93 86 00 	sts	0x0086, r24
	OCR1A = (OCR_MAX+OCR_MIN)/2; // определяем число сравнения
  f0:	85 eb       	ldi	r24, 0xB5	; 181
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25
  f8:	80 93 88 00 	sts	0x0088, r24
	TCCR1B |=(1<<CS10)|(1<<CS11)|(0<<CS12)|(1<<WGM12)|(1<<WGM13); //запуск таймера
  fc:	e1 e8       	ldi	r30, 0x81	; 129
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8b 61       	ori	r24, 0x1B	; 27
 104:	80 83       	st	Z, r24
 106:	08 95       	ret

00000108 <__vector_1>:
//	GICR |= (1<<INT0); //разрешение прерывания на INT0
}

char i=7; //переход на следующий режим при нажатии кнопки
ISR (INT0_vect) //переход на следующий режим при ажатии кнопки
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
//	if((!(PIND&1))&&(i>7))i-=1;

//	if((PIND&1)&&(i<37))i+=1;
//	PORTB=i;
}
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <_Z3maplllll>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 11c:	4f 92       	push	r4
 11e:	5f 92       	push	r5
 120:	6f 92       	push	r6
 122:	7f 92       	push	r7
 124:	af 92       	push	r10
 126:	bf 92       	push	r11
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	29 01       	movw	r4, r18
 13e:	3a 01       	movw	r6, r20
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 140:	9b 01       	movw	r18, r22
 142:	ac 01       	movw	r20, r24
 144:	24 19       	sub	r18, r4
 146:	35 09       	sbc	r19, r5
 148:	46 09       	sbc	r20, r6
 14a:	57 09       	sbc	r21, r7
 14c:	89 89       	ldd	r24, Y+17	; 0x11
 14e:	9a 89       	ldd	r25, Y+18	; 0x12
 150:	ab 89       	ldd	r26, Y+19	; 0x13
 152:	bc 89       	ldd	r27, Y+20	; 0x14
 154:	bc 01       	movw	r22, r24
 156:	cd 01       	movw	r24, r26
 158:	6a 19       	sub	r22, r10
 15a:	7b 09       	sbc	r23, r11
 15c:	8c 09       	sbc	r24, r12
 15e:	9d 09       	sbc	r25, r13
 160:	0e 94 00 01 	call	0x200	; 0x200 <__mulsi3>
 164:	a8 01       	movw	r20, r16
 166:	97 01       	movw	r18, r14
 168:	24 19       	sub	r18, r4
 16a:	35 09       	sbc	r19, r5
 16c:	46 09       	sbc	r20, r6
 16e:	57 09       	sbc	r21, r7
 170:	0e 94 10 01 	call	0x220	; 0x220 <__divmodsi4>
 174:	89 01       	movw	r16, r18
 176:	9a 01       	movw	r18, r20
 178:	0a 0d       	add	r16, r10
 17a:	1b 1d       	adc	r17, r11
 17c:	2c 1d       	adc	r18, r12
 17e:	3d 1d       	adc	r19, r13
}
 180:	60 2f       	mov	r22, r16
 182:	71 2f       	mov	r23, r17
 184:	82 2f       	mov	r24, r18
 186:	93 2f       	mov	r25, r19
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	bf 90       	pop	r11
 19a:	af 90       	pop	r10
 19c:	7f 90       	pop	r7
 19e:	6f 90       	pop	r6
 1a0:	5f 90       	pop	r5
 1a2:	4f 90       	pop	r4
 1a4:	08 95       	ret

000001a6 <main>:

int main (void)
{
	uint16_t adc_result;
	uint8_t i=0;
	Port_init(); //инициализация портов
 1a6:	0e 94 66 00 	call	0xcc	; 0xcc <_Z9Port_initv>
	//	init_interp(); //инициализация внешних прерываний
	adc_init();
 1aa:	0e 94 4b 00 	call	0x96	; 0x96 <_Z8adc_initv>
	timer_init(); //инициализация таймера
 1ae:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z10timer_initv>
			OCR1A = i;
			_delay_ms(100);
		}
		*/
		adc_result=adc_read(0);
		OCR1A = map(adc_result,0,1024,OCR_MIN,OCR_MAX);
 1b2:	0f 2e       	mov	r0, r31
 1b4:	fa ef       	ldi	r31, 0xFA	; 250
 1b6:	9f 2e       	mov	r9, r31
 1b8:	f0 2d       	mov	r31, r0
 1ba:	c8 e8       	ldi	r28, 0x88	; 136
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
		{
			OCR1A = i;
			_delay_ms(100);
		}
		*/
		adc_result=adc_read(0);
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 52 00 	call	0xa4	; 0xa4 <_Z8adc_readh>
		OCR1A = map(adc_result,0,1024,OCR_MIN,OCR_MAX);
//		OCR1A = OCR_MIN+(adc_result * (OCR_MAX-OCR_MIN)/1024);
//		OCR1A = adc_result;
		
	}
 1c4:	88 27       	eor	r24, r24
 1c6:	99 27       	eor	r25, r25
			OCR1A = i;
			_delay_ms(100);
		}
		*/
		adc_result=adc_read(0);
		OCR1A = map(adc_result,0,1024,OCR_MIN,OCR_MAX);
 1c8:	1f 92       	push	r1
 1ca:	1f 92       	push	r1
 1cc:	1f 92       	push	r1
 1ce:	9f 92       	push	r9
 1d0:	0f 2e       	mov	r0, r31
 1d2:	f0 e7       	ldi	r31, 0x70	; 112
 1d4:	af 2e       	mov	r10, r31
 1d6:	b1 2c       	mov	r11, r1
 1d8:	c1 2c       	mov	r12, r1
 1da:	d1 2c       	mov	r13, r1
 1dc:	f0 2d       	mov	r31, r0
 1de:	e1 2c       	mov	r14, r1
 1e0:	14 e0       	ldi	r17, 0x04	; 4
 1e2:	f1 2e       	mov	r15, r17
 1e4:	00 e0       	ldi	r16, 0x00	; 0
 1e6:	10 e0       	ldi	r17, 0x00	; 0
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	a9 01       	movw	r20, r18
 1ee:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z3maplllll>
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	0f 90       	pop	r0
 1fa:	79 83       	std	Y+1, r23	; 0x01
 1fc:	68 83       	st	Y, r22
 1fe:	df cf       	rjmp	.-66     	; 0x1be <main+0x18>

00000200 <__mulsi3>:
 200:	db 01       	movw	r26, r22
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
 206:	0e 94 2c 01 	call	0x258	; 0x258 <__muluhisi3>
 20a:	bf 91       	pop	r27
 20c:	af 91       	pop	r26
 20e:	a2 9f       	mul	r26, r18
 210:	80 0d       	add	r24, r0
 212:	91 1d       	adc	r25, r1
 214:	a3 9f       	mul	r26, r19
 216:	90 0d       	add	r25, r0
 218:	b2 9f       	mul	r27, r18
 21a:	90 0d       	add	r25, r0
 21c:	11 24       	eor	r1, r1
 21e:	08 95       	ret

00000220 <__divmodsi4>:
 220:	05 2e       	mov	r0, r21
 222:	97 fb       	bst	r25, 7
 224:	16 f4       	brtc	.+4      	; 0x22a <__divmodsi4+0xa>
 226:	00 94       	com	r0
 228:	07 d0       	rcall	.+14     	; 0x238 <__divmodsi4_neg1>
 22a:	57 fd       	sbrc	r21, 7
 22c:	0d d0       	rcall	.+26     	; 0x248 <__divmodsi4_neg2>
 22e:	0e 94 37 01 	call	0x26e	; 0x26e <__udivmodsi4>
 232:	07 fc       	sbrc	r0, 7
 234:	09 d0       	rcall	.+18     	; 0x248 <__divmodsi4_neg2>
 236:	7e f4       	brtc	.+30     	; 0x256 <__divmodsi4_exit>

00000238 <__divmodsi4_neg1>:
 238:	90 95       	com	r25
 23a:	80 95       	com	r24
 23c:	70 95       	com	r23
 23e:	61 95       	neg	r22
 240:	7f 4f       	sbci	r23, 0xFF	; 255
 242:	8f 4f       	sbci	r24, 0xFF	; 255
 244:	9f 4f       	sbci	r25, 0xFF	; 255
 246:	08 95       	ret

00000248 <__divmodsi4_neg2>:
 248:	50 95       	com	r21
 24a:	40 95       	com	r20
 24c:	30 95       	com	r19
 24e:	21 95       	neg	r18
 250:	3f 4f       	sbci	r19, 0xFF	; 255
 252:	4f 4f       	sbci	r20, 0xFF	; 255
 254:	5f 4f       	sbci	r21, 0xFF	; 255

00000256 <__divmodsi4_exit>:
 256:	08 95       	ret

00000258 <__muluhisi3>:
 258:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__umulhisi3>
 25c:	a5 9f       	mul	r26, r21
 25e:	90 0d       	add	r25, r0
 260:	b4 9f       	mul	r27, r20
 262:	90 0d       	add	r25, r0
 264:	a4 9f       	mul	r26, r20
 266:	80 0d       	add	r24, r0
 268:	91 1d       	adc	r25, r1
 26a:	11 24       	eor	r1, r1
 26c:	08 95       	ret

0000026e <__udivmodsi4>:
 26e:	a1 e2       	ldi	r26, 0x21	; 33
 270:	1a 2e       	mov	r1, r26
 272:	aa 1b       	sub	r26, r26
 274:	bb 1b       	sub	r27, r27
 276:	fd 01       	movw	r30, r26
 278:	0d c0       	rjmp	.+26     	; 0x294 <__udivmodsi4_ep>

0000027a <__udivmodsi4_loop>:
 27a:	aa 1f       	adc	r26, r26
 27c:	bb 1f       	adc	r27, r27
 27e:	ee 1f       	adc	r30, r30
 280:	ff 1f       	adc	r31, r31
 282:	a2 17       	cp	r26, r18
 284:	b3 07       	cpc	r27, r19
 286:	e4 07       	cpc	r30, r20
 288:	f5 07       	cpc	r31, r21
 28a:	20 f0       	brcs	.+8      	; 0x294 <__udivmodsi4_ep>
 28c:	a2 1b       	sub	r26, r18
 28e:	b3 0b       	sbc	r27, r19
 290:	e4 0b       	sbc	r30, r20
 292:	f5 0b       	sbc	r31, r21

00000294 <__udivmodsi4_ep>:
 294:	66 1f       	adc	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	88 1f       	adc	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	1a 94       	dec	r1
 29e:	69 f7       	brne	.-38     	; 0x27a <__udivmodsi4_loop>
 2a0:	60 95       	com	r22
 2a2:	70 95       	com	r23
 2a4:	80 95       	com	r24
 2a6:	90 95       	com	r25
 2a8:	9b 01       	movw	r18, r22
 2aa:	ac 01       	movw	r20, r24
 2ac:	bd 01       	movw	r22, r26
 2ae:	cf 01       	movw	r24, r30
 2b0:	08 95       	ret

000002b2 <__umulhisi3>:
 2b2:	a2 9f       	mul	r26, r18
 2b4:	b0 01       	movw	r22, r0
 2b6:	b3 9f       	mul	r27, r19
 2b8:	c0 01       	movw	r24, r0
 2ba:	a3 9f       	mul	r26, r19
 2bc:	01 d0       	rcall	.+2      	; 0x2c0 <__umulhisi3+0xe>
 2be:	b2 9f       	mul	r27, r18
 2c0:	70 0d       	add	r23, r0
 2c2:	81 1d       	adc	r24, r1
 2c4:	11 24       	eor	r1, r1
 2c6:	91 1d       	adc	r25, r1
 2c8:	08 95       	ret

000002ca <_exit>:
 2ca:	f8 94       	cli

000002cc <__stop_program>:
 2cc:	ff cf       	rjmp	.-2      	; 0x2cc <__stop_program>
