
Servotester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000134  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000090f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000109  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000091  00000000  00000000  00000a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000a2  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000f4  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  8e:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z9Port_initv>:
#include <util/delay.h>
#include <avr/interrupt.h>

void Port_init (void)
{
	DDRB =0xFF; //2-е первые ножки на выход так как они управляют двигателем
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	84 b9       	out	0x04, r24	; 4
	PORTB=0x00; // 4ую ножку тоже на выход(ножка OC0)
  9a:	15 b8       	out	0x05, r1	; 5
  9c:	08 95       	ret

0000009e <_Z10timer_initv>:
}

void timer_init (void)
{
	TCCR1A|=(0<<WGM10)|(1<<WGM11); // устанавливаем режим шим Fast PWM
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	80 83       	st	Z, r24
	TCCR1A|=(1<<COM1A1); // определяем механизм изм состояния ножки
  a8:	80 81       	ld	r24, Z
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	80 83       	st	Z, r24
	ICR1=4999; 
  ae:	87 e8       	ldi	r24, 0x87	; 135
  b0:	93 e1       	ldi	r25, 0x13	; 19
  b2:	90 93 87 00 	sts	0x0087, r25
  b6:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 225; // определяем число сравнения
  ba:	81 ee       	ldi	r24, 0xE1	; 225
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 89 00 	sts	0x0089, r25
  c2:	80 93 88 00 	sts	0x0088, r24
	TCCR1B |=(1<<CS10)|(1<<CS11)|(0<<CS12)|(1<<WGM12)|(1<<WGM13); //запуск таймера
  c6:	e1 e8       	ldi	r30, 0x81	; 129
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8b 61       	ori	r24, 0x1B	; 27
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <__vector_1>:
//	GICR |= (1<<INT0); //разрешение прерывания на INT0
}

char i=7; //переход на следующий режим при нажатии кнопки
ISR (INT0_vect) //переход на следующий режим при ажатии кнопки
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
	if((!(PIND&1))&&(i>7))i-=1;
  de:	48 99       	sbic	0x09, 0	; 9
  e0:	04 c0       	rjmp	.+8      	; 0xea <__vector_1+0x18>
  e2:	80 91 00 01 	lds	r24, 0x0100
  e6:	88 30       	cpi	r24, 0x08	; 8
  e8:	50 f4       	brcc	.+20     	; 0xfe <__vector_1+0x2c>

	if((PIND&1)&&(i<37))i+=1;
  ea:	48 9b       	sbis	0x09, 0	; 9
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <__vector_1+0x24>
  ee:	80 91 00 01 	lds	r24, 0x0100
  f2:	85 32       	cpi	r24, 0x25	; 37
  f4:	40 f0       	brcs	.+16     	; 0x106 <__vector_1+0x34>
	PORTB=i;
  f6:	80 91 00 01 	lds	r24, 0x0100
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	08 c0       	rjmp	.+16     	; 0x10e <__vector_1+0x3c>
}

char i=7; //переход на следующий режим при нажатии кнопки
ISR (INT0_vect) //переход на следующий режим при ажатии кнопки
{
	if((!(PIND&1))&&(i>7))i-=1;
  fe:	81 50       	subi	r24, 0x01	; 1
 100:	80 93 00 01 	sts	0x0100, r24
 104:	f2 cf       	rjmp	.-28     	; 0xea <__vector_1+0x18>

	if((PIND&1)&&(i<37))i+=1;
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 00 01 	sts	0x0100, r24
 10c:	f4 cf       	rjmp	.-24     	; 0xf6 <__vector_1+0x24>
	PORTB=i;
}
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:

int main (void)
{
	Port_init(); //инициализация портов
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9Port_initv>
	//	init_interp(); //инициализация внешних прерываний
	timer_init(); //инициализация таймера
 11e:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z10timer_initv>
		{
			OCR1A = i;
			_delay_ms(100);
		}
		*/
		OCR1A=500;
 122:	e8 e8       	ldi	r30, 0x88	; 136
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	84 ef       	ldi	r24, 0xF4	; 244
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	91 83       	std	Z+1, r25	; 0x01
 12c:	80 83       	st	Z, r24
 12e:	fd cf       	rjmp	.-6      	; 0x12a <main+0x10>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
